---
import Header from '../components/Header.astro';
import Section from '../components/Section.astro';
import Entry from '../components/Entry.astro';
import Layout from '../layouts/Layout.astro';

import * as settings from '/src/content/settings.md';
import * as information from '/src/content/information.md';
import * as schema from '/src/content/schema.md';

interface Section {
	frontmatter: {
		title: string;
		image?: string;
		columns?: boolean;
		order: number;
	},
	compiledContent: () => string;
}

interface InfoEntry {
	frontmatter: {
		title: string;
	},
	compiledContent: () => string;
}

interface SchemaEvent {
	frontmatter: {
		title: string;
		time: string;
		image: string;
	},
	compiledContent: () => string;
}

let sections = await Promise.all(
	Object.values(import.meta.glob<Section>('/src/content/sections/*.md')).map((fn) => fn())
);

let infoEntries = await Promise.all(
	Object.values(import.meta.glob<InfoEntry>('/src/content/infos/*.md')).map((fn) => fn())
);

let schemaEvents = await Promise.all(
	Object.values(import.meta.glob<SchemaEvent>('/src/content/events/*.md')).map((fn) => fn())
);

// Sort by frontmatter order
sections = sections.sort((a, b) => a.frontmatter.order - b.frontmatter.order);

// Sort by frontmatter time in descending order
schemaEvents = schemaEvents.sort((a, b) => {
    const aTime = a.frontmatter.time;
    const bTime = b.frontmatter.time;

    if (aTime < bTime) {
        return -1;
    }

    if (aTime > bTime) {
        return 1;
    }

    return 0;
});

---

<Layout title={settings.frontmatter.title}>
	<Header content={settings.compiledContent()} date={settings.frontmatter.date} />

	{
		sections.map((section, index) => (
			<Section 
				title={section.frontmatter.title} 
				columns={section.frontmatter.columns} 
				theme={index % 2 === 0 ? 'dark' : 'light'}
			>
				<Fragment set:html={section.compiledContent()}></Fragment>
			</Section>
		))
	}

	<Section density="compact" title={schema.frontmatter.title} list theme={sections.length % 2 === 0 ? 'dark' : 'light'}>
		<div class="flex flex-col gap-8">
			<img
				src={schema.frontmatter.image}
				alt=""
				class="h-auto w-full rounded"
			/>
			<p class="mb-8">
				<Fragment set:html={schema.compiledContent()}></Fragment>
			</p>

			<ul>
				{schemaEvents.map((event) => (
					<li class="border-b border-sand first-of-type:border-t">
						<Entry 
							title={event.frontmatter.title} 
							time=`Kl ${event.frontmatter.time}` 
							image={event.frontmatter.image}
						>
							<Fragment set:html={event.compiledContent()}></Fragment>
						</Entry>
					</li>
				))}
			</ul>
		</div>
	</Section>

	<Section density="compact" title={information.frontmatter.title} list theme={(sections.length + 1) % 2 === 0 ? 'dark' : 'light'}>
		<ul>
			{infoEntries.map((entry) => (
				<li class="border-b border-sand first-of-type:border-t">
					<Entry title={entry.frontmatter.title}>
						<Fragment set:html={entry.compiledContent()}></Fragment>
					</Entry>
				</li>
			))}
		</ul>
	</Section>
</Layout>
